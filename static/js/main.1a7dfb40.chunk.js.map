{"version":3,"sources":["components/form-input-slider/index.tsx","components/questionnaire/styles.ts","components/questionnaire/index.tsx","pages/landing/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormInputSlider","name","control","setValue","props","React","useState","sliderValue","setSliderValue","useEffect","handleChange","event","newValue","sliderMarks","Array","from","keys","map","val","value","includes","label","render","Slider","onChange","valueLabelDisplay","min","max","step","marks","makeStyles","theme","container","padding","spacing","backgroundColor","borderRadius","Questionnaire","classes","useStyles","useForm","register","handleSubmit","Container","className","maxWidth","Typography","variant","gutterBottom","onSubmit","data","alert","JSON","stringify","Grid","item","xs","TextField","fullWidth","size","required","inputProps","inputMode","pattern","InputProps","startAdornment","InputAdornment","position","id","Button","color","type","Landing","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a7dfb40.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { Slider } from '@material-ui/core'\nimport { Controller, Control, UseFormSetValue } from 'react-hook-form'\n\n// We cannot use Slider directly with react-hook-forms so... we need to wrapp it under a Controller\nconst FormInputSlider: React.FC<{\n  name: string\n  control: Control<any, object>\n  setValue: UseFormSetValue<any>\n}> = ({ name, control, setValue, ...props }) => {\n  const [sliderValue, setSliderValue] = React.useState(0)\n\n  useEffect(() => {\n    setValue(name, sliderValue)\n  }, [name, setValue, sliderValue])\n\n  const handleChange = (event: any, newValue: number | number[]) => {\n    setSliderValue(newValue as number)\n  }\n\n  // Init slider with labels at 0, 5 and 10, but with marks at all points\n  const sliderMarks = Array.from(Array(11).keys()).map((val) => {\n    return {\n      value: val,\n      ...([0, 5, 10].includes(val) && { label: val }),\n    }\n  })\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={() => (\n        <Slider\n          value={sliderValue}\n          onChange={handleChange}\n          {...props}\n          valueLabelDisplay=\"auto\"\n          min={0}\n          max={10}\n          step={1}\n          marks={sliderMarks}\n        />\n      )}\n    />\n  )\n}\nexport default FormInputSlider\n","import { makeStyles } from '@material-ui/core/styles'\n\nexport default makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(3),\n    backgroundColor: 'white',\n    borderRadius: theme.spacing(1),\n  },\n}))\n","import React from 'react'\nimport { useForm, SubmitHandler } from 'react-hook-form'\nimport {\n  Container,\n  Grid,\n  Button,\n  TextField,\n  Typography,\n  InputAdornment,\n} from '@material-ui/core/'\nimport FormInputSlider from 'components/form-input-slider'\nimport useStyles from './styles'\n\ntype Inputs = {\n  name: string\n  income: Number\n  risk: Number\n}\n\nconst Questionnaire = () => {\n  const classes = useStyles()\n  const {\n    register,\n    handleSubmit,\n    //formState: { errors }, We can use errors to display helper text IE errors.name or errors.income\n    control,\n    setValue,\n  } = useForm<Inputs>()\n\n  const onSubmit: SubmitHandler<Inputs> = (data) => {\n    alert(JSON.stringify(data))\n  }\n\n  return (\n    <Container className={classes.container} maxWidth=\"xs\">\n      <Typography variant=\"h6\" gutterBottom>\n        Fill the form to start - (simulation to be implemented)\n      </Typography>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <Typography gutterBottom>Whatâ€™s your name?</Typography>\n                <TextField\n                  fullWidth\n                  label=\"Name\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  {...register('name', { required: true })}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Typography gutterBottom>\n                  How much do you earn per month?\n                </Typography>\n\n                <TextField\n                  fullWidth\n                  label=\"Monthly Income\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n                  {...register('income', { required: true })}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">$</InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n\n              <Grid item xs={12}>\n                <Typography id=\"risk-slider\" gutterBottom>\n                  What is your risk tolerance level?\n                </Typography>\n                <FormInputSlider\n                  name=\"risk\"\n                  control={control}\n                  setValue={setValue}\n                  aria-labelledby=\"risk-slider\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Button\n              color=\"secondary\"\n              fullWidth\n              type=\"submit\"\n              variant=\"contained\"\n            >\n              Continue\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </Container>\n  )\n}\n\nexport default Questionnaire\n","import React from 'react'\n\nimport Questionnaire from 'components/questionnaire'\n\nconst Landing: React.FC = () => {\n  return <Questionnaire />\n}\n\nexport default Landing\n","import React from 'react'\nimport './App.css'\nimport Landing from 'pages/landing'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Landing />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}